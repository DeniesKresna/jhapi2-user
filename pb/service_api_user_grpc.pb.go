// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: service_api_user.proto

package pb

import (
	context "context"
	role "github.com/DeniesKresna/jhapi2-user/pb/role"
	user "github.com/DeniesKresna/jhapi2-user/pb/user"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiUserClient is the client API for ApiUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiUserClient interface {
	CreateUser(ctx context.Context, in *user.CreateUserRequest, opts ...grpc.CallOption) (*user.CreateUserResponse, error)
	CreateRole(ctx context.Context, in *role.CreateRoleRequest, opts ...grpc.CallOption) (*role.CreateRoleResponse, error)
}

type apiUserClient struct {
	cc grpc.ClientConnInterface
}

func NewApiUserClient(cc grpc.ClientConnInterface) ApiUserClient {
	return &apiUserClient{cc}
}

func (c *apiUserClient) CreateUser(ctx context.Context, in *user.CreateUserRequest, opts ...grpc.CallOption) (*user.CreateUserResponse, error) {
	out := new(user.CreateUserResponse)
	err := c.cc.Invoke(ctx, "/proto.ApiUser/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiUserClient) CreateRole(ctx context.Context, in *role.CreateRoleRequest, opts ...grpc.CallOption) (*role.CreateRoleResponse, error) {
	out := new(role.CreateRoleResponse)
	err := c.cc.Invoke(ctx, "/proto.ApiUser/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiUserServer is the server API for ApiUser service.
// All implementations must embed UnimplementedApiUserServer
// for forward compatibility
type ApiUserServer interface {
	CreateUser(context.Context, *user.CreateUserRequest) (*user.CreateUserResponse, error)
	CreateRole(context.Context, *role.CreateRoleRequest) (*role.CreateRoleResponse, error)
	mustEmbedUnimplementedApiUserServer()
}

// UnimplementedApiUserServer must be embedded to have forward compatible implementations.
type UnimplementedApiUserServer struct {
}

func (UnimplementedApiUserServer) CreateUser(context.Context, *user.CreateUserRequest) (*user.CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedApiUserServer) CreateRole(context.Context, *role.CreateRoleRequest) (*role.CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedApiUserServer) mustEmbedUnimplementedApiUserServer() {}

// UnsafeApiUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiUserServer will
// result in compilation errors.
type UnsafeApiUserServer interface {
	mustEmbedUnimplementedApiUserServer()
}

func RegisterApiUserServer(s grpc.ServiceRegistrar, srv ApiUserServer) {
	s.RegisterService(&ApiUser_ServiceDesc, srv)
}

func _ApiUser_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiUserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ApiUser/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiUserServer).CreateUser(ctx, req.(*user.CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiUser_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(role.CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiUserServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ApiUser/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiUserServer).CreateRole(ctx, req.(*role.CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiUser_ServiceDesc is the grpc.ServiceDesc for ApiUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ApiUser",
	HandlerType: (*ApiUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _ApiUser_CreateUser_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _ApiUser_CreateRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_api_user.proto",
}
